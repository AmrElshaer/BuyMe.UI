// <auto-generated />
using System;
using BuyMe.Infrastructure.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BuyMe.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220315184638_addPurchaseTypeRole")]
    partial class addPurchaseTypeRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BuyMe.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85015707-1d0b-4020-870a-c99dd896ec48",
                            Email = "Admin@buyMe.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BUYME.COM",
                            NormalizedUserName = "ADMIN@BUYME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE73XX0uhDjonxdh3trPCUFK1eZCfyhMuE8D84PA3+/wvkzDwEHFxlUHerVsqdbu/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c206729-f526-453c-8ed7-c722ae0dd912",
                            TwoFactorEnabled = false,
                            UserName = "Admin@buyMe.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "6963347a-3c97-4067-a25a-020b554d23e1",
                            ConcurrencyStamp = "4375769a-e07d-4ba6-8b80-e2940d4935ca",
                            Name = "Product",
                            NormalizedName = "Product"
                        },
                        new
                        {
                            Id = "a0b910d1-4d89-4ab6-af0a-de2e74dbf815",
                            ConcurrencyStamp = "51973c8d-84d4-44dc-a51b-77ef3f040f0d",
                            Name = "Warehouse",
                            NormalizedName = "Warehouse"
                        },
                        new
                        {
                            Id = "f10073f5-0e5e-482c-baf7-5fae98a0540a",
                            ConcurrencyStamp = "6ecb4428-a703-4f32-9ef6-21b6d108ae34",
                            Name = "CustomerType",
                            NormalizedName = "CustomerType"
                        },
                        new
                        {
                            Id = "86144a8a-ba8e-44eb-98aa-44a14c42ccf3",
                            ConcurrencyStamp = "212eaa02-4e8d-4b94-9914-fc33a8d529f5",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "ac91ce43-4d87-4803-a7c6-f9adf952aac9",
                            ConcurrencyStamp = "4a77c14e-daea-4250-b651-b6d5f0d1191d",
                            Name = "SalesType",
                            NormalizedName = "SalesType"
                        },
                        new
                        {
                            Id = "2a79d3b0-b86c-4610-bbf0-08ce903bf5e7",
                            ConcurrencyStamp = "af9f8a5d-a88d-4ea3-ba80-be18564cc01a",
                            Name = "SalesOrder",
                            NormalizedName = "SalesOrder"
                        },
                        new
                        {
                            Id = "23b9f195-9efa-4249-baa2-21f4e0241b9e",
                            ConcurrencyStamp = "fed8562a-5873-45ec-879b-0d67746a7507",
                            Name = "Category",
                            NormalizedName = "Category"
                        },
                        new
                        {
                            Id = "458117b2-049d-4745-b403-457c74c34ac5",
                            ConcurrencyStamp = "bf446d3d-1faf-45f1-8bf7-f57ad6437d1c",
                            Name = "UnitOfMeasure",
                            NormalizedName = "UnitOfMeasure"
                        },
                        new
                        {
                            Id = "65f4d565-c15c-434b-8e16-6832143e66df",
                            ConcurrencyStamp = "5dcb5c12-2720-431a-8bbd-aa548176ce40",
                            Name = "Currency",
                            NormalizedName = "Currency"
                        },
                        new
                        {
                            Id = "2922c843-42d7-414c-8e75-3c6d4ff41a75",
                            ConcurrencyStamp = "8a9e7238-4552-43e9-a104-12eb9750ed24",
                            Name = "Branch",
                            NormalizedName = "Branch"
                        },
                        new
                        {
                            Id = "3da9d6b8-d8a9-4136-8757-a3ee6551a7ed",
                            ConcurrencyStamp = "72cd4310-206a-411b-a7a5-36c01791c8a2",
                            Name = "Template",
                            NormalizedName = "Template"
                        },
                        new
                        {
                            Id = "c053a238-3bf3-4884-afc7-437231832702",
                            ConcurrencyStamp = "189f4b9b-719f-4877-a5d4-156e640397af",
                            Name = "Settings",
                            NormalizedName = "Settings"
                        },
                        new
                        {
                            Id = "f0577cce-bf19-4df1-b904-91e30428fe03",
                            ConcurrencyStamp = "2ed5bf0c-f64e-488c-8cbf-935101c87329",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "90181d29-4fb3-42d7-827d-6a3202e1e376",
                            ConcurrencyStamp = "8010ed2e-0a53-4959-8bf5-c87eb3ecd538",
                            Name = "ChangeRole",
                            NormalizedName = "ChangeRole"
                        },
                        new
                        {
                            Id = "7f470d75-8230-4f35-beb2-a74c495c546e",
                            ConcurrencyStamp = "e12f717b-a8cd-4e25-9b58-8f5611d58b4e",
                            Name = "ShipmentType",
                            NormalizedName = "ShipmentType"
                        },
                        new
                        {
                            Id = "ce85f325-e870-4835-8eaa-d914bb4a4d24",
                            ConcurrencyStamp = "799cea13-186e-4009-90e4-b2427e859421",
                            Name = "Shipment",
                            NormalizedName = "Shipment"
                        },
                        new
                        {
                            Id = "ca24589f-fa06-4652-b33d-bec2a092d2b1",
                            ConcurrencyStamp = "47d897a4-7e7b-4b31-bea1-869dc69e1bfa",
                            Name = "InvoiceType",
                            NormalizedName = "InvoiceType"
                        },
                        new
                        {
                            Id = "13db4ca9-3847-4ff0-afb6-8792a3844cb0",
                            ConcurrencyStamp = "07cfd35b-c9c8-4393-9081-43cc697c150f",
                            Name = "Invoice",
                            NormalizedName = "Invoice"
                        },
                        new
                        {
                            Id = "f7a7c928-38e4-4d12-a9a8-fdc62eb41c35",
                            ConcurrencyStamp = "79a25074-108b-488a-a7da-551a486c70dc",
                            Name = "PaymentType",
                            NormalizedName = "PaymentType"
                        },
                        new
                        {
                            Id = "cf99949a-1437-4ef5-8b65-49c3a897c985",
                            ConcurrencyStamp = "875b6e34-c85c-48d2-a2af-bdd5b3e34f9e",
                            Name = "PaymentReceive",
                            NormalizedName = "PaymentReceive"
                        },
                        new
                        {
                            Id = "a4efd654-286b-4bc5-9813-3b2beaa4f37d",
                            ConcurrencyStamp = "859ae86d-82e5-4f21-a05d-891e5a128f2b",
                            Name = "VendorType",
                            NormalizedName = "VendorType"
                        },
                        new
                        {
                            Id = "7cf2b0db-235f-4852-931e-4814fa21398f",
                            ConcurrencyStamp = "0204daf4-7df7-4cbe-bb65-1921693d0d6c",
                            Name = "Vendor",
                            NormalizedName = "Vendor"
                        },
                        new
                        {
                            Id = "cd9e85f8-e7fb-4056-9e86-a288dd139881",
                            ConcurrencyStamp = "363d13ec-1280-402c-aafc-6b5fa4972704",
                            Name = "PurchaseType",
                            NormalizedName = "PurchaseType"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BuyMe.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BuyMe.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuyMe.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BuyMe.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
