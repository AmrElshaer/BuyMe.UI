@using Newtonsoft.Json;
@using BuyMe.Application.CustomField.Queries.GetCustomFields
<link rel="stylesheet" href="~/css/grid.css" />
<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        Product
        <small>Inventory</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i>Product</a></li>
        <li class="active">Inventory</li>
    </ol>
</section>

<!-- Main content -->
<section class="content">
    <div class="control-section">
        <ejs-grid id="Grid" actionBegin="actionBegin" actionFailure="actionFailure" actionComplete="actionComplete" toolbar="@(new List<string>() { "Add", "Edit", "Delete","Print","Search","<a href='#' class='badge badge-warning' data-toggle='modal' data-target='#exampleModal'>New Field</a>" })" allowPaging="true">
            <e-data-manager url="/Inventory/Product/UrlDataSource" insertUrl="/Inventory/Product/CreateEdit" updateUrl="/Inventory/Product/CreateEdit" removeUrl="/Inventory/Product/Delete" adaptor="UrlAdaptor"></e-data-manager>
            <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog" template='#dialogtemplate'></e-grid-editSettings>
            <e-grid-columns>
                <e-grid-column field="ProductId" headerText="ProductId" allowSearching="false" allowFiltering="false" isPrimaryKey="true" visible="false"></e-grid-column>
                <e-grid-column field="ProductName" headerText="Product Name" type="string"></e-grid-column>
                <e-grid-column field="UOM" allowSearching="false" headerText="UOM" type="string"></e-grid-column>
                <e-grid-column field="Barcode" headerText="Barcode" type="string" visible="false"></e-grid-column>
                <e-grid-column field="DefaultBuyingPrice" headerText="Buying Price" format="C2" template="#DefaultBuyingPriceTemp"></e-grid-column>
                <e-grid-column field="DefaultSellingPrice" headerText="Selling Price" template="#DefaultSellingPriceTemp" format="C2"></e-grid-column>
                <e-grid-column field="BranchName" allowSearching="false" allowFiltering="false" visible="false" headerText="Branch" type="string"></e-grid-column>
                <e-grid-column field="CompanyId" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                <e-grid-column field="CategoryId" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                <e-grid-column field="CurrencyId" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                <e-grid-column field="BranchId" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                <e-grid-column field="UnitOfMeasureId" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                <e-grid-column field="AllowMarketing" headerText="Marketing" displayAsCheckBox="true"></e-grid-column>
                <e-grid-column field="ProductImages" allowSearching="false" allowFiltering="false" visible="false"></e-grid-column>
                @*@foreach(var colum in ViewBag.AdditionalColums as IEnumerable<CustomFieldDto>){
                    <e-grid-column field="@colum.FieldName" allowSearching="false" allowFiltering="false"></e-grid-column>
                }*@
            </e-grid-columns>
        </ejs-grid>
    </div>
</section><!-- /.content -->
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Product Config</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <button type="button" id="addNewField" class="btn btn-light">New Field</button>
                
             
                    <table class="table table-bordered table-condensed table-striped">
                        <thead>
                            <tr>
                                    <th>Field Name</th>
                                    <th>Field Type</th>
                                    <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var colum in ViewBag.AdditionalColums as IEnumerable<CustomFieldDto>)
                            {
                                <tr>
                                    <td style="display:none">@colum.Id</td>
                                    <td>@colum.FieldName</td>
                                    <td>@colum.FieldType</td>
                                    <td style="display:none">@colum.Category</td>
                                    <td><button onclick="additionColDisplay(this)" type="button" class="btn btn-warning"><i class="glyphicon glyphicon-edit"></i></button> 
                                    <button onclick="deleteAddionCol(@(colum.Id))" class="btn btn-danger"><i class="glyphicon glyphicon-trash"></i></button> </td>
                                </tr>
                            }
                            </tbody>
                    </table>
                

                <form id="addColumn">
                    <input name="Id" type="hidden" id="additionId"/>
                    <div class="form-group last mb-4">
                        <input type="text" placeholder="Field Name" class="form-control" name="FieldName" id="additionFieldName">
                    </div>
                    <div class="form-group last mb-4">
                        <select class="form-control" name="FieldType" id="additionFieldType">
                            <option value="text">Text</option>
                            <option value="number">Number</option>
                            <option value="date">Date</option>
                            <option value="time">Time</option>
                            <option value="datetime-local">DateTime</option>
                            <option value="url">Url</option>
                            <option value="tel">Telephone</option>
                            <option value="email">Email</option>
                            <option value="color">Color</option>
                        </select>
                    </div>
                    <input type="hidden" placeholder="Field Type" class="form-control" value="Product" name="Category" id="additionCategory">
                   
                    <button class="btn btn-primary" type="submit" id="addEditBtn">Add</button>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script id='DefaultBuyingPriceTemp' type="text/x-template">
    <span>${CurrencyCode} ${DefaultBuyingPrice}</span>
</script>
<script id='DefaultBuyingPriceTemp' type="text/x-template">
    <span>${CurrencyCode} ${DefaultBuyingPrice}</span>
</script>
<script id='DefaultSellingPriceTemp' type="text/x-template">
    <span>${CurrencyCode} ${DefaultSellingPrice}</span>
</script>
<script id='dialogtemplate' type="text/x-template">
    <div id="dialogTemp"></div>
</script>
<script src="~/js/grid.js"></script>


<script>

    function actionBegin(args) {
        if (args.action === 'add' || args.action === 'edit') {
            // product descriptions
            let productDesciptions = [];
            const allCategoryDesc = $('.allProductDescs').length;
            for (var i = 0; i < allCategoryDesc; i++) {
                productDesciptions.push({
                    CategoryDescriptionId: parseInt($(`#CategoryDescriptionId_${i}`).val()),
                    Id: parseInt($(`#Id_${i}`).val()),
                    ProductId: parseInt($(`#ProductId_${i}`).val()),
                    Description:  $(`#Description_${i}`).val()
                });
            }
            console.log(productDesciptions);
            args.data.ProductDescriptions = productDesciptions;
            // additional columnField
            let additionalColums=[];
            const columsLength=$('.additionalColums').length;
            for(var i=0;i<columsLength;i++)
            {
                additionalColums.push({
                 FieldValue:$(`#FieldName_${i}`).val(),
                 FieldName:$(`#FieldName_${i}`).attr('name')
                });
            }
            console.log(additionalColums);
            args.data.CustomColumns = additionalColums;
            let inputTypes = [];
            $('input[name="Images"]').each(function () {
                inputTypes.push($(this).attr('value'));
            });
            console.log(args.data);
            args.data.ProductImages = inputTypes;
        }
    }
    function onUploadSuccess(args) {
        if (args.operation === 'upload') {
            const imgName = args.e.currentTarget.getResponseHeader('name');
            if (imgName != null) {
                args.file.name = imgName;
                const itemId = imgName.split('.')[0];
                const ele = `<div style="border-radius:3px;display:inline-flex" id="${itemId}">
                            <span class="e-avatar e-avatar-xlarge" style="background-image:url(/images/${imgName})"></span>
                            <input name="Images" value="${imgName}" type="hidden" />
                        </div>`;
                $(".allProductImages").append(ele);
            }

        }
        if (args.operation === 'remove') {
            const itemId = args.file.name.split('.')[0];
            $(`.allProductImages #${itemId}`).remove();
        }
    }
    function onUploadFailure(args) {
        console.log(args);
    }
    function actionFailure(args) {
        displayErrors(args)
    }
    function actionComplete(args) {
        debugger;
        if (args.requestType === 'beginEdit' || args.requestType === 'add') {
            args.form.ej2_instances[0].addRules('BranchId', { required: true });
            args.form.ej2_instances[0].addRules('UnitOfMeasureId', { required: true });
            args.form.ej2_instances[0].addRules('CategoryId', { required: true });
            args.form.ej2_instances[0].addRules('BranchId', { required: true });
                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                if (args.requestType === 'beginEdit' || args.requestType === 'add') {
                    var ajax = new ej.base.Ajax({
                        url: "@Url.Action($"EditAddPartial", "Product")", //render the partial view
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ value: args.rowData })
                    });
                    ajax.send().then(function (data) {
                        appendElement(data, args.form); //Render the edit form with selected record
                        args.form.elements.namedItem('ProductName').focus();
                        ej.popups.hideSpinner(args.dialog.element);
                    }).catch(function (xhr) {
                        console.log(xhr);
                        ej.popups.hideSpinner(args.dialog.element);
                    });
                }
            }
    }
</script>
<script type="text/javascript">
    function branchChange(e) {
        $.ajax({
            url: `/Config/Currency/GetBranchCurrency?branchId=${e.value}`,
            type: 'GET',
            success: function (data) {
                $("#CurrencyCode").val(data.CurrencyCode);
                $("#CurrencyId").val(data.CurrencyId);

            }
        })
    }
    function categoryChange(e) {
        const productId = $('#ProductId').val();
        $.ajax({
            url: `/Inventory/Product/GetProductDescription?categoryId=${e.value}&productId=${productId}`,
            type: 'GET',
            success: function (data) {
                $('#categoryDescriptionDetails').html('');
                $('#categoryDescriptionDetails').append(data);
            }
        })
    }
</script>
@section Scripts{
    <script type="text/javascript">
        function additionColDisplay(ctl) {
            let _row = $(ctl).parents("tr");
            let cols = _row.children("td");
            $('#additionId').val($(cols[0]).text());
            $('#additionFieldName').val($(cols[1]).text());
            $('#additionFieldType').val($(cols[2]).text());
            $('#additionCategory').val($(cols[3]).text());
            $('#addEditBtn').text('Edit');
        }

        function deleteAddionCol(additionColId) {
            $.ajax({
                url: `/CustomField/DeleteCustomField`,
                data: { CustomFieldId: additionColId },
                type: 'POST',
                success: function (result) {
                    location.reload();
                }
            })
        }
        document.getElementById('addNewField').addEventListener('click', function () {
            $('#additionId').val('');
            $('#additionFieldName').val('');
            $('#additionFieldType').val('');
            $('#addEditBtn').text('Add');

        });
        $(document).ready(function () {
            $('#addColumn').on('submit',function(e){
                e.preventDefault();
                const data=$(this).serialize();
                 $.ajax({
                    url: `/CustomField/UpSertCustomField`,
                    data:data,
                    type: 'POST',
                    success: function (result) {
                       location.reload();
                    }
                })
            });

        });
    </script>
}

